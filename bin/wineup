#!/usr/bin/env bash

#------------------------------------------------------------------
# Autor: NidoBr
# Mais: < https://github.com/NIDObr >
# Email: coqecoisa@gmail.com
# Versão: 0.6-beta 06/11/2021
# Sobre: Baixa e atualiza versões do WINE e Proton
# License: BSD-3-Clause License
#------------------------------------------------------------------

#---------------------------changelog: ----------------------------
#
# Versão: 0.6-beta 06/11/2021
#	- Totalmente reformulado, dando prioridade a GUI e facilidade de uso.
#	- wget trocado pelo aria2c, possibilitando downloads paralelos com multiplas conexões
#	- Correçaõ de bugs
#
# Versão: 0.5-beta 22/09/2021
#	- Adicionado HELP
#	- Corrigido bug que não mostrava algumas versções especificas, como as wine-ge 6-16
#
# Versão: 0.4-beta 21/09/2021
#	- Adicionada opções longas
#	- Download automatico funcionando
#
# Versão: 0.3-beta 20/09/2021
#	- Reformulação em todo o codigo (opções -c, -d e -u)
#	- Troca parcial do curl pelo lynx
#	- Agora a data do lançamento do wine/proton no GitHub é exibido
#	- Download automatico ( -ud ), indisponivel
#
#----------------------------Vars----------------------------------

# Cria uma array associativa contendo as mirros
declare -A mirrors_urls
wineup_version="wineup-0.6-beta"
help="
Uso: $(basename "$0") [ opção ]

Opções:
 --upgrade		Procura atualizações e baixa
 --autoupdate		Adiciona builds para baixar automaticamente
 -d, --download		Baixa uma ou mais versẽs de sua escolha
 -h, --help		Exibe esta ajuda e sai

"

# Carrega as configuraões
source /etc/wineup/wineup_cfg
source /etc/wineup/wineup_mirrors

#----------------------------Funçoes-------------------------------

# Responsavel por baixar os arquivos solicitados
download_file(){
	[ -e "${dir_downloads}" ] || mkdir "${dir_downloads}"
	[ -e "/tmp/wineup/downloads" ] || mkdir -p "/tmp/wineup/downloads"
	notify-send "${wineup_version}" "Baixando, aguarde."
	# Baixa as urls soliciadas em  e extrai para as determinadas pastas.
	aria2c --summary-interval=0 --console-log-level=error -x5 -j3 -i "/tmp/wineup/dowload_list" -d "/tmp/wineup/downloads" && {
		for file_extract in /tmp/wineup/downloads/* ;do
			$(basename "${file_extract}" | grep -qi "proton") && {
				tar -xaf "${file_extract}" -C "${dir_steamproton}"
			} || {
				tar -xaf "${file_extract}" -C "${dir_downloads}"
			}
		done
		notify-send "${wineup_version}" "Downloads concluidos com sucesso!"
	}
}

# Procura atualizações
update_db(){
	wine_type=$(zenity --title="${wineup_version}" \
		--text="Escolha qual você quer baixar:" \
		--forms --add-combo="Versão:" \
		--combo-values="WineGE|WineLutris|WineTKG|ProtonGE|ProtonTKG" )
	[ -z "$wine_type" -o "${wine_type}" = " " ] && exit 0
	notify-send "${wineup_version}" "Obtendo lista de versões, aguarde..."
	# Responsavel pelo Web-Scraping, extrai as informações necessarias das urls
	index=$(cat /etc/wineup/wineup_mirrors | grep -Eio "( ${wine_type}[a-z]* )")
	count=2
	release_list=$(lynx --dump "${mirrors_urls[${index}]}" | grep -Eo "https\:\/\/.*releases.*tar\.(gz|xz|zst)")
	# Procura por multiplas paginas no GitHub
	while true;do
		next_page=$(lynx --dump "${mirrors_urls[${index}]}" | grep -m 1 -Eo "https://.*\?page\=${count}.*")
		$(lynx --dump "${next_page}" | grep -q -Eo "https\:\/\/.*releases.*tar\.(gz|xz|zst)") && {
			release_list=$(printf "${release_list}\n" ; lynx --dump "${next_page}" | grep -Eo "https\:\/\/.*releases.*tar\.(gz|xz|zst)")
		} || {
			break
		}
		((count++))
	done
	# Separa wine e proton, adiciona a entrada na lista de versões e formata para exibir na tela
	for release in ${release_list};do
		case "${wine_type}" in
			WineGE|WineLutris|WineTKG)
				if `printf "${release}" | awk -F '/' '{print $9}' | grep -Eqi "(wine|lutris)"`;then
					printf '%s\n' "${release}" | awk -F '/' '{print $9}' >> "/tmp/wineup/release_list"
				fi
			;;
			ProtonGE|ProtonTKG)
				if `printf "${release}" | awk -F '/' '{print $9}' | grep -qi "proton"`;then
					printf '%s\n' "${release}" | awk -F '/' '{print $9}' >> "/tmp/wineup/release_list"
				fi
			;;
		esac
	done
	# Gera a lista com urls
	printf "${release_list}" >> "/tmp/wineup/url_release_list"
}

#------------------------------------------------------------------

case $1 in
	--upgrade) update_db upgrade;;
	-a|--autoupdate);;
	-d|--download)
		# recria os diretorios temporarios
		[ -e "/tmp/wineup" ] && rm -rf "/tmp/wineup" ; mkdir "/tmp/wineup" || mkdir "/tmp/wineup"
		# Obtem a lista de versões disponiveins
		update_db
		# Selecionar uma ou mais versões para download
		selec_list=$(zenity --title="${wineup_version}" --list --multiple --checklist \
			--width=450 \
			--height=600 \
			--text="Versões disponiveins:" \
			--separator=" " \
			--column="" \
			--column="Versão" \
			$(for i in `cat "/tmp/wineup/release_list"`;do printf "0 \n${i} \n";done)
		)
		[ -z "$selec_list" ] && exit 0
		# Obtem as URLs e prepara para o download
		for url_get in $selec_list ;do
			grep "$url_get" /tmp/wineup/url_release_list >> "/tmp/wineup/dowload_list"
		done
		download_file
	;;
	-h|--help|*)printf "${help}";;
esac



