#!/usr/bin/env bash

#------------------------------------------------------------------
# Autor: NidoBr
# Mais: < https://github.com/NIDObr >
# Email: coqecoisa@gmail.com
# Versão: 1.0-beta 29/01/2021
# Sobre: Baixa e atualiza versões do WINE e Proton
# License: BSD-3-Clause License
#------------------------------------------------------------------

#----------------------------Vars----------------------------------

# Cria uma array associativa contendo as mirros
declare -A mirrors_urls
wineup_version="wineup-1.0-beta"
help="
Uso: $(basename "$0") [ opção ]

Opções:
	-c, --cleancfg		Limpa as configurações do usuario
	-g, --gui		Inicia a GUI (Padrão)
	-h, --help		Exibe esta ajuda e sai
	-r, --remove		Inicia a janela para remover versões especificas
"
# Carrega as configuraões
source /etc/wineup/wineup_cfg
source /etc/wineup/wineup_mirrors

#----------------------------Funçoes-------------------------------

start_gui(){
	[ -e "${dir_wineup_user}/wineprefix_list" ] || printf "${HOME}/.wine" >> "${dir_wineup_user}/wineprefix_list"
	gui_list=$(zenity --class="${wineup_version}" --title="${wineup_version}" --list \
		--width=600 \
		--height=400 \
		--extra-button="Importar \"Wineprefix\"" \
		--extra-button="Gerenciar runners" \
		--text="Prefixos instaladas:" \
		--column="Caminho" \
		--column="DXVK" \
		--column="Arch" \
		--column="Windows" \
		$(for path_prefix in `cat "${dir_wineup_user}/wineprefix_list" | tr '|' ' '`;do
			printf "${path_prefix}"
			dxvk_version="`strings "${path_prefix}/dosdevices/c:/windows/system32/dxgi.dll" | tr '$\n' ' ' | grep -Eo 'DXVK:  v[0-9\.]{1,}'`"
			[ -z "${dxvk_version}" ] && dxvk_version=${dxvk_version:=\ none}
			printf "${dxvk_version#DXVK: } "
			prefix_arch=$(grep -Eo "arch=win(32|64)" "${path_prefix}/system.reg")
			printf "${prefix_arch#arch=} "
			win_version=$(strings "${path_prefix}/system.reg" | grep -Eo -m1 'Windows (10|8.1|8|2008\ R2|7|2008|Vista|2003|XP)')
			printf "${win_version#Windows\ } "
		done)
	)
	[ -z "${gui_list}" -o "${gui_list}" = " " ] && exit 0
	[ "${gui_list}" == "Importar \"Wineprefix\"" ] && add_prefix
	[ "${gui_list}" == "Gerenciar runners" ] && update_db
	prefix_db "${gui_list}"
}

# Procura atualizações
update_db(){
	rm -rf "/tmp/wineup"
	mkdir "/tmp/wineup"
	[ "${1}" == "dxvk" ] && {
		tool_type="DXVK"
	} || {
		tool_type=$(zenity --class="${wineup_version}" --title="${wineup_version}" \
			--text="Escolha qual ferramenta você quer baixar:" \
			--cancel-label="Voltar" \
			--extra-button="Gerenciar instalados" \
			--forms --width=400 --add-combo="Versão:" \
			--combo-values="WineGE|WineLutris|WineTKG|ProtonGE|ProtonTKG|LuxtorpedaDEV|DXVK" )
	}
	[ -z "$tool_type" -o "${tool_type}" = " " ] && start_gui
	[ "$tool_type" == "Gerenciar instalados" ] && exclui_db
	(
		# Responsavel pelo Web-Scraping, extrai as informações necessarias das urls
		index=$(cat /etc/wineup/wineup_mirrors | grep -Eio "( ${tool_type} )")
		count=2
		release_list=$(lynx --dump "${mirrors_urls[${index}]}" | grep -Eo "https\:\/\/.*releases.*tar\.(gz|xz|zst)")
		# Procura por multiplas paginas no GitHub
		while true;do
			next_page=$(lynx --dump "${mirrors_urls[${index}]}" | grep -m 1 -Eo "https://.*\?page\=${count}.*")
			$(lynx --dump "${next_page}" | grep -q -Eo "https\:\/\/.*releases.*tar\.(gz|xz|zst)") && {
				release_list=$(printf "${release_list}\n" ; lynx --dump "${next_page}" | grep -Eo "https\:\/\/.*releases.*tar\.(gz|xz|zst)")
			} || {
				break
			}
			((count++))
		done
		# Separa wine e proton, adiciona a entrada na lista de versões
		# Gera a lista com urls
		[ "${tool_type}" == "ProtonTKG" -o "${tool_type}" == "ProtonGE" ] && {
			printf "${release_list}" | grep -i "proton" > "/tmp/wineup/url_release_list"
		} || {
			printf "${release_list}" | grep -iv "proton" > "/tmp/wineup/url_release_list"
		}
	) | zenity --class="${wineup_version}" --title="${wineup_version}" \
		--width=400 --text="Atualizando listas, aguarde..." \
		--progress --pulsate --auto-close --no-cancel
	export pid_update_z=$(pidof -s zenity)
	[ "${1}" == "dxvk" ] && {
		download_db _prefix_db ${2}
	} || {
		download_db _update_db
	}
}

prefix_db(){

	[ "${1}" == dxvk ] && {
		wine_prefix="${2}"
		acao_prefix="Gerenciar DXVK"
	} || {
		wine_prefix="${1}"
		prefix=$(zenity --class="${wineup_version}" --title="${wineup_version}" \
			--text=" Gerenciar Wineprefix: \n  ${wine_prefix}  \n" \
			--cancel-label="Voltar" \
			--extra-button="Remover" \
			--extra-button="Excluir" \
			--forms --width=400 \
			--separator="|" \
			--add-combo="Ação:" \
			--combo-values="Gerenciar DXVK|Rodar winecfg|Rodar winetricks")
		[ -z "${prefix}" ] && start_gui
		[ "${prefix}" == ' | ' ] && start_gui
		[ "${prefix}" == "Remover" -o "${prefix}" == "Excluir" ] && {
			[ "${prefix}" == "Excluir" ] && rm -rf ${wine_prefix:=/dev/null}
			old_list=$(cat "${dir_wineup_user}/wineprefix_list")
			printf "${old_list/"${wine_prefix}"/}" > "${dir_wineup_user}/wineprefix_list"
			start_gui
		}
		acao_prefix=${prefix}
	}
	[ "${wine_prefix}" == " " -o "${acao_prefix}" == " " ] && prefix_db ${wine_prefix}
	case "${acao_prefix}" in
		'Gerenciar DXVK')
			dxvk_list=$(ls ${dir_downloads} | grep "dxvk" | tr '\n' '|')
			export WINEPREFIX="${wine_prefix}"
			dxvk_select=$(zenity --class="${wineup_version}" --title="${wineup_version}" \
				--text="Gerenciar DXVK:" \
				--forms --width=400 \
				--separator="|" \
				--add-combo="DXVK:" \
				--combo-values="${dxvk_list%|}" \
				--add-combo="Ação:" \
				--combo-values="Instalar/Atualizar DXVK|Desinstalar DXVK|Baixar outras versões")
			[ -z "${dxvk_select}" ] && start_gui
			[ "${dxvk_select}" == ' | ' ] && start_gui
			dxvk_version=${dxvk_select%%|*}
			acao_dxvk=${dxvk_select##*|}
			case "${acao_dxvk}" in
				"Instalar/Atualizar DXVK")
					${dir_downloads}/${dxvk_version}/setup_dxvk.sh install && {
						notify-send "${wineup_version}" "DXVK Instalado/Atualizado!"
						printf "Pronto!"
					}
				;;
				"Desinstalar DXVK")
					${dir_downloads}/${dxvk_version}/setup_dxvk.sh uninstall && {
						notify-send "${wineup_version}" "DXVK Desinstalado!"
						printf "Pronto!"
					}
				;;
				"Baixar outras versões")update_db dxvk ${wine_prefix};;	
			esac
			prefix_db ${wine_prefix}
		;;
		'Rodar winecfg')
			export WINEPREFIX="${wine_prefix}"
			winecfg
			prefix_db ${wine_prefix}
		;;
		"Rodar winetricks")
			export WINEPREFIX="${wine_prefix}"
			winetricks
			prefix_db ${wine_prefix}
		;;
	esac
	update_db
}

# Responsavel por baixar os arquivos solicitados
download_file(){
	[ -e "${dir_downloads}" ] || mkdir "${dir_downloads}"
	[ -e "/tmp/wineup/downloads" ] || mkdir -p "/tmp/wineup/downloads"
	[ -e "${HOME}/.steam/steam/compatibilitytools.d" ] || mkdir -p "${HOME}/.steam/steam/compatibilitytools.d"
	# Baixa as urls soliciadas em e extrai para as determinadas pastas.
	(
		printf '# Baixando arquivos, aguarde...\n'
		aria2c --summary-interval=0 --console-log-level=error -x"${aria_multi}" -j"${aria_paralel}" -i "/tmp/wineup/dowload_list" -d "/tmp/wineup/downloads" && {
			printf '# Extraindo arquivos...\n'
			echo $file_extract > teste
			for file_extract in /tmp/wineup/downloads/* ;do
				if $(basename "${file_extract}" | grep -qi 'proton');then
					tar -xaf "${file_extract}" -C "${dir_steamproton}"
				elif $(basename "${file_extract}" | grep -qi 'luxtorpeda');then
					torpeda_ver=$(basename "${file_extract}" | grep -Eo '[0-9]{1,}')
					tar -xaf "${file_extract}" -C "/tmp/wineup/downloads"
					mv "/tmp/wineup/downloads/luxtorpeda" "${dir_steamproton}/luxtorpeda-${torpeda_ver}"
				elif $(basename "${file_extract}" | grep -qi 'dxvk');then
					tar -xaf "${file_extract}" -C "${dir_downloads}"
				else
					tar -xaf "${file_extract}" -C "${dir_downloads}"
				fi
			done
			printf '# Concluido.\n'
			notify-send "${wineup_version}" "Downloads concluidos com sucesso!"
		}
	) |
	# Mostra o progresso do download e extração
	zenity --class="${wineup_version}" --title="${wineup_version}" \
		--text="Iniciando downloads" \
		--progress --pulsate --width=400 \
		--auto-kill --no-cancel
	${1#_} dxvk ${2}
}

download_db(){
		# Obtem a lista de versões disponiveins
		kill -9 "${pid_update_z}" 2>/dev/null
		# Selecionar uma ou mais versões para download
		selec_list=$(zenity --class="${wineup_version}" --title="${wineup_version}" --list --multiple --checklist \
			--width=450 \
			--height=600 \
			--text="Versões disponiveins:" \
			--separator=" " \
			--column="" \
			--column="Versão" \
			$(for i in `cat "/tmp/wineup/url_release_list" | awk -F '/' '{print $9}'`;do printf "0 \n${i} \n";done)
		)
		[ -z "$selec_list" ] && update_db
		# Obtem as URLs e prepara para o download
		for url_get in $selec_list;do
			grep "$url_get" /tmp/wineup/url_release_list >> "/tmp/wineup/dowload_list"
		done
		download_file ${1} ${2}
}

exclui_db(){
	selec_exclui=$(zenity --class="${wineup_version}" --title="${wineup_version}" --list --multiple --checklist \
			--width=450 \
			--height=500 \
			--text="Versões instaladas:" \
			--separator=" " \
			--column="" \
			--column="Versão" \
			--ok-label=Excluir \
			$(for i in ${dir_steamproton}/* ${dir_downloads}/* ;do [ '*' == "`basename ${i}`" ] || printf "0 \n`basename ${i}` \n"; done)
	)
	[ -z "${selec_exclui}" ] && update_db
	for a in ${selec_exclui} ;do
		find ${dir_steamproton} ${dir_downloads} -iname ${a} -exec rm -rf {} \; &> /dev/null
	done
	notify-send "${wineup_version}" "Arquivos excluidos com sucesso!"
}

add_prefix(){
	dxvk_dirs=$(zenity --class="${wineup_version}" --title="${wineup_version}" --file-selection --directory --multiple \
		--width=400 \
		--height=500 \
		--text="" \
		--separator="|")
	[ -s "${dir_wineup_user}/wineprefix_list" ] && separetor="|" || separetor=""
	printf "${separetor}${dxvk_dirs}" >> "${dir_wineup_user}/wineprefix_list"
	start_gui
}

progress_db(){
	$(zenity --class="${wineup_version}" --title="${wineup_version}" --width=400 --text="${1}, aguarde..." --progress --pulsate --no-cancel) &
	export pid_progress_z=$(pidof -s zenity)
}

#------------------------------------------------------------------

case $1 in
	-h|--help)printf "${help}";;
	-c|--cleancfg)
		printf "Limpando \"${dir_wineup_user}\" "
		rm -rf ${dir_wineup_user} 2>/dev/null && printf "Ok\n"
		mkdir "${dir_wineup_user}"
	;;
	-r|--remove)exclui_db _exit;;
	-g|--gui|*)
		[ -e "${dir_wineup_user}" ] || mkdir "${dir_wineup_user}"
		start_gui
	;;
esac

