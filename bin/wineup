#!/usr/bin/env bash

#------------------------------------------------------------------
# Autor: NidoBr
# Mais: < https://github.com/NIDObr >
# Email: coqecoisa@gmail.com
# Versão: 0.5-beta 22/09/2021
# Sobre: Baixa e atualiza versões do WINE e Proton
# License: BSD-3-Clause License
#------------------------------------------------------------------

#---------------------------changelog: ----------------------------
# Versão: 0.5-beta 22/09/2021
#	- Adicionado HELP
#	- Corrigido bug que não mostrava algumas versções especificas, como as wine-ge 6-16
#
# Versão: 0.4-beta 21/09/2021
#	- Adicionada opções longas
#	- Download automatico funcionando
#
# Versão: 0.3-beta 20/09/2021
#	- Reformulação em todo o codigo (opções -c, -d e -u)
#	- Troca parcial do curl pelo lynx
#	- Agora a data do lançamento do wine/proton no GitHub é exibido
#	- Download automatico ( -ud ), indisponivel
#
#----------------------------Vars----------------------------------

declare -A mirrors_urls

# Carrega as configuraões
source /etc/wineup/wineup_cfg
source /etc/wineup/wineup_mirrors

help="
Uso: $(basename "$0") [ opção ]

Opções:
 -c, --create		Atualiza e cria as listas com as versões
 -d, --download		Baixa uma versão de sua escolha
 -u, --update		Procura atualizações
 -ud, -du		Procura atualizações e baixa
 -h, --help		Exibe esta ajuda e sai
 
"

#----------------------------Funçoes-------------------------------

# Responsavel por baixar os arquivos solicitados
download_build(){
	printf "\nIniciando Downloads\n"
	# Verifica se os diretorios estão criados
	[ -e "$dir_downloads" ] || mkdir "$dir_downloads"
	[ -e /tmp/wineup ] || mkdir /tmp/wineup
	# Localiza a url do arquivo solicitado pelas outras funçoẽs
	if `printf $1 | grep -q 'https://'`;then
		url_get="${1}"
	else
		url_get=`eval cat ${dir_wineup_user}/releases_* | grep -Eo ".*${1}.*${2}.*${3}.* "`
	fi
	printf '%s\n' "Baixando de: \"${url_get}\""
	# Baixa o arquivo para uma pasta temporaria para extrailo posteriormente
	wget -q --show-progress "${url_get}" -O /tmp/wineup/`basename "${url_get}"` && {
		printf "\n\"`basename ${url_get}`\" baixado com sucesso\n"
		printf "Extraindo arquivos...\n\n"
		# Escolhe o diretorio apropriado (wine ou proton) e extrai o arquivo
		`basename ${url_get} | grep -qi "proton"` && {
			tar xaf "/tmp/wineup/`basename ${url_get}`" -C "${dir_steamproton}" && printf "Extração completa!\n\n"
		} || {
			tar xaf "/tmp/wineup/`basename ${url_get}`" -C "${dir_downloads}" && printf "Extração completa!\n\n"
		}
	}
}

#----------------------------Main-----------------------------------

# Parser
case $1 in
	-c|"--create")
		# Verifica se o diretorio exixte
		[ -e ${dir_wineup_user} ] || {
			mkdir ${dir_wineup_user}
		} && {
			# Recria
			rm -rf ${dir_wineup_user}
			mkdir ${dir_wineup_user}
		}
		# Gera as listas de versões disponiveins
		for index in `cat /etc/wineup/wineup_mirrors | grep -Eo '( (wine|proton)[a-z]* )'`;do
			printf '%s\n' "Atualizando de: "${mirrors_urls[ ${index} ]}""
			printf "${mirrors_urls[ ${index} ]}" | awk -F '/' '{print $4"_"$5}' >> ${dir_wineup_user}/releases
			# Responsavel pelo Web-Scraping, extrai as informações necessarias das urls
			for release in `lynx --dump "${mirrors_urls[ ${index} ]}" | grep -Eo "https\:\/\/.*releases.*\.tar\.(gz|xz|zst)"`;do
				tag_version=`printf "${release}" | awk -F '/' '{print $8}'`
				# Data que o arquivo foi upado no github
				release_date=`curl -s "${mirrors_urls[ ${index} ]}/tag/${tag_version}" | grep -Eo "[0-9]{4}\-[0-9]{2}\-[0-9]{2}"`
				# Separa wine e proton, adiciona a entrada na lista de versões e formata para exibir na tela
				if `printf "${index}" | grep -qi "wine"`;then
					if `printf "${release}" | awk -F '/' '{print $9}' | grep -Eqi "(wine|lutris)"`;then
						printf "${release} ${release_date}\n" >> ${dir_wineup_user}/releases_${index}
						printf '%s\n' "${release} ${release_date}" | awk -F '/' '{print "* "$5": "$8" "$9}'
					fi
				else
					if `printf "${release}" | awk -F '/' '{print $9}' | grep -qi "proton"`;then
						printf "${release} ${release_date}\n" >> ${dir_wineup_user}/releases_${index}
						printf '%s\n' "${release} ${release_date}" | awk -F '/' '{print "* "$5": "$8" "$9}'
					fi
				fi
			done
		done
		printf "Pronto\nDeseja ativar o Update automatico para alguma versão?  [ctrl+c para sair]\n\n"
		# Ativa o update automatico para a build escolhida
		select build_select in `cat ${dir_wineup_user}/releases | awk -F " " '{print $1}'` Sair;do
			[[ "$build_select" == "Sair" ]] && exit 0
			if `printf "$build_select" | grep -Eq "[0-9]*"`;then
				printf '%s\n' "Adicionando \"${build_select}\""
				printf "`cat ${dir_wineup_user}/releases | grep $build_select`\n" >> ${dir_wineup_user}/autoupdate
			fi
		done
	;;
	-d|"--download")
		# Baixa uma verção especifica das listas geradas anteriormente
		[[ -e /tmp/wineup ]] || mkdir /tmp/wineup
		printf "Listar versões do WINE ou Proton?  [ctrl+c para sair]\n"
		select op_tipo in "wine" "proton" "Sair";do
			case $op_tipo in
				wine|proton)
					printf "Listando as versões disponiveins: \n\n"
					printf "Deseja baixar alguma versão?  [ctrl+c para sair]\n"
					select build_select in `eval cat ${dir_wineup_user}/releases_${op_tipo}* | awk -F '/' '{print $5"__"$8"__"$9}' | awk -F ' ' '{print $1"__"$2}'`;do
						[ -z "${build_select}" ] && continue
						cat ${dir_wineup_user}/releases_* | grep $build_select > /tmp/wineup/${tmprefix}_select_version.tmp
						printf $build_select | awk -F '__' '{print $1" "$2" "$3}'
						download_build `printf $build_select | awk -F '__' '{print $1" "$2" "$3}'`
					done
				;;
				Sair) exit 0;;
				*) continue;;
			esac
		done
	;;
	-u|"-ud"|"-du"|"--update")
		# Procura por atualizações, comparando as listas locais com novas (diff e Web-Scraping)
		rm -rf /tmp/wineup
		[ -e /tmp/wineup ] || mkdir /tmp/wineup
		printf '%s\n' "Atualizando..."
		for index in `cat /etc/wineup/wineup_mirrors | grep -Eo '( (wine|proton)[a-z]* )'`;do
			for release in `lynx --dump "${mirrors_urls[ ${index} ]}" | grep -Eo "https\:\/\/.*releases.*\.tar\.(gz|xz|zst)"`;do
				tag_version=`printf "${release}" | awk -F '/' '{print $8}'`
				release_date=`curl -s "${mirrors_urls[ ${index} ]}/tag/${tag_version}" | grep -Eo "[0-9]{4}\-[0-9]{2}\-[0-9]{2}"`
				if `printf "${index}" | grep -qi "wine"`;then
					if `printf "${release}" | awk -F '/' '{print $9}' | grep -Eqi "(wine|lutris)"`;then
						printf "${release} ${release_date}\n" >> /tmp/wineup/tmpreleases_${index}
					fi
				else
					if `printf "${release}" | awk -F '/' '{print $9}' | grep -qi "proton"`;then
						printf "${release} ${release_date}\n" >> /tmp/wineup/tmpreleases_${index}
					fi
				fi
			done
			# Compara e sobrescreve as listas, as novas versões ficarão no arquivo "/tmp/wineup/tmpreleases"
			diff "/tmp/wineup/tmpreleases_${index}" "${dir_wineup_user}/releases_${index}" | grep -Eo "https.* [0-9\-]*" >> /tmp/wineup/tmpreleases
			mv -f /tmp/wineup/tmpreleases_${index} ${dir_wineup_user}/releases_${index}
		done
		[ -s /tmp/wineup/tmpreleases ] && {
			printf '%s\n' "Novas versões encontradas: "
			cat /tmp/wineup/tmpreleases | awk -F '/' '{print "* "$5": "$8" "$9}'
		} || {
			printf '%s\n' "Nada a fazer."
		}
		# Responsavel pelo download automatico
		if [ "$1" == "-ud" ]||[ "$1" == "-du" ];then
			for autoupdate in `cat ${dir_wineup_user}/autoupdate | awk -F '_' '{print $2}'`;do
				for new_url in `cat /tmp/wineup/tmpreleases | grep -oE ".*${autoupdate}.* "`;do
					# chama a função responsavel pelo download
					download_build $new_url
				done
			done
		fi
	;;
	-h|--help|*)
		printf "${help}"
	;;
esac
